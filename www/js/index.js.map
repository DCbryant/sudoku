{"version":3,"sources":["webpack:///webpack/bootstrap 8a049eab7b8d5de2eb1b","webpack:///./js/index.js","webpack:///./js/core/toolkit.js","webpack:///./js/ui/grid.js","webpack:///./js/core/checker.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/generator.js","webpack:///./js/ui/popupnumbers.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;;;;;;;AC3BD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,4BAA2B,SAAS;AACpC,MAAK;;AAEL;AACA;AACA,qBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,SAAS;;AAExB;AACA,qBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,+BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAiC,MAAM;AACvC,6CAA4C,UAAU;AACtD,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChHA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,WAAW;AACtC;AACA;AACA,gCAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,WAAW;AACtC;AACA,gCAA+B,WAAW;AAC1C;AACA;AACA;AACA,gCAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,WAAW;AACtC;AACA;AACA,iCAAgC,YAAY;AAC5C;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACtHA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,E;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,IAAI;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;AACA;;AAEA;AACA;AACA,iC;;;;;;AC5DA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,gBAAe,SAAS;AACxB;AACA,qBAAoB,KAAK;AACzB,oBAAmB,IAAI;AACvB,UAAS;AACT;;AAEA;AACA;AACA;AACA,E","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8a049eab7b8d5de2eb1b","const Toolkit = require('./core/toolkit')\r\nconst Grid = require('./ui/grid')\r\nconst PopupNumbers = require('./ui/popupnumbers')\r\n\r\n\r\nconst grid = new Grid(\"#container\")\r\ngrid.build()\r\ngrid.layout()\r\n\r\nconst popupNumbers = new PopupNumbers($('#popupNumbers'))\r\ngrid.bindPopup(popupNumbers)\r\n\r\n\r\n\r\n$('#check').on('click',(e) => {\r\n    if(grid.check()){\r\n        alert('成功~')\r\n    }\r\n})\r\n$('#reset').on('click',(e) => {\r\n    grid.reset()\r\n})\r\n$('#clear').on('click',(e) => {\r\n    grid.clear()\r\n})\r\n$('#rebuild').on('click',(e) => {\r\n    grid.rebuild()\r\n})\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","// 工具集\r\n// 矩阵和数组相关工具\r\n\r\n\r\nconst martixToolkit = {\r\n    makeRow(v=0){\r\n        const array = new Array(9)\r\n        array.fill(v)\r\n        return array\r\n    },\r\n    \r\n    makeMatrix(v=0){\r\n        return Array.from({length:9},() => this.makeRow(v))\r\n    },\r\n    \r\n    shuffle(array){\r\n        const endIndex = array.length - 2\r\n        for(let i=0;i<=endIndex;i++){\r\n            let j = i + Math.floor(Math.random() * (array.length - i));\r\n            [array[i],array[j]] = [array[j],array[i]]\r\n        }\r\n        return array\r\n    },\r\n\r\n    /**\r\n     * 检查指定位置可以填写数据\r\n     */\r\n    checkFillable(martix,n,rowIndex,colIndex){\r\n        // // 数据抽取：行，列，宫\r\n        // 行\r\n        const row = martix[rowIndex]\r\n        // 列\r\n        const column = this.makeRow().map((v,i) => martix[i][colIndex])\r\n        // 宫\r\n        const {boxIndex} = boxToolkit.convertToBoxIndex(rowIndex,colIndex)\r\n\r\n        const box = boxToolkit.getBoxCells(martix,boxIndex)\r\n        for(let i=0;i<9;i++){\r\n            if(row[i] === n || column[i] === n || box[i] === n){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n}\r\n\r\n/**\r\n * 宫坐标系工具\r\n */\r\nconst boxToolkit = {\r\n    convertToBoxIndex(rowIndex,colIndex){\r\n        return{\r\n            boxIndex:Math.floor(rowIndex/3) * 3 + Math.floor(colIndex/3),\r\n            cellIndex:rowIndex % 3 * 3 + colIndex % 3\r\n        }\r\n    },\r\n\r\n    convertFromBoxIndex(boxIndex,cellIndex){\r\n        return{\r\n            rowIndex:Math.floor(boxIndex/3) * 3 + Math.floor(cellIndex/3),\r\n            colIndex:boxIndex % 3 * 3 + cellIndex % 3\r\n        }\r\n    },\r\n\r\n    getBoxCells(martix,boxIndex){\r\n        const startRowIndex = Math.floor(boxIndex / 3) * 3\r\n        const startColIndex = boxIndex % 3 * 3\r\n        const result = []\r\n        for(let cellIndex = 0;cellIndex < 9;cellIndex++){\r\n            const rowIndex = startRowIndex + Math.floor(cellIndex / 3)\r\n            const colIndex = startColIndex + cellIndex % 3\r\n            result.push(martix[rowIndex][colIndex])\r\n        }\r\n        return result\r\n    }\r\n }\r\n\r\n// 工具集\r\nmodule.exports = class Toolkit{\r\n    /**\r\n     * 矩阵和数组相关的工具\r\n     */    \r\n    static get martix(){\r\n        return martixToolkit\r\n    }\r\n    /**\r\n     * 宫坐标系工具\r\n     */\r\n    static get box(){\r\n        return boxToolkit\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/toolkit.js\n// module id = 1\n// module chunks = 0","// 生成九宫格\r\nconst Toolkit = require('../core/toolkit')\r\nconst Checker = require('../core/checker')\r\nconst Sudoku = require('../core/sudoku')\r\nmodule.exports =  class Grid{\r\n    constructor(container){\r\n        this._$container = $(container)\r\n    }\r\n\r\n    build(){\r\n        // const generator = new Generator()\r\n        // generator.generate()\r\n        // const martix = generator.martix\r\n        const sudoku = new Sudoku()\r\n        sudoku.make()\r\n        const martix = sudoku.puzzleMartix\r\n\r\n        const rowGroupClasses = [\"row_g_top\",\"row_g_middle\",\"row_g_bottom\"]\r\n        const colGroupClasses = [\"col_g_left\",\"col_g_center\",\"col_g_right\"]\r\n\r\n        const $cells = martix.map((rowValues) => rowValues\r\n            .map((cellValue,cellIndex) =>{\r\n            return $(\"<span></span>\")\r\n                .addClass(colGroupClasses[cellIndex % 3])\r\n                .addClass(cellValue ? 'marked' : 'empty')\r\n                .text(cellValue)\r\n        }))\r\n\r\n        const $divArray = $cells.map(($spanArray,rowIndex) => {\r\n            return $(\"<div></div>\")\r\n                .addClass('row')\r\n                .addClass(rowGroupClasses[rowIndex % 3])\r\n                .append($spanArray)\r\n        })\r\n\r\n        this._$container.append($divArray)\r\n    }\r\n\r\n    layout(){\r\n        const width = $(\"span:first\",this._$container).width()\r\n        $(\"span\",this._$container)\r\n            .height(width)\r\n            .css({\r\n                \"line-height\":`${width}px`,\r\n                \"font-size\":width > 32 ? `${width / 2}px` : ''\r\n            })\r\n    }\r\n\r\n    bindPopup(popUpNumbers){\r\n        this._$container.on('click','span',e => {\r\n            const $cell = $(e.target)\r\n            if($cell.is('.marked')){\r\n                return;\r\n            }\r\n            popUpNumbers.popup($cell)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 检查用户解谜的结果，成功则进行提示，失败显示错误位置的标记\r\n     */\r\n    check(){\r\n        // 获取需要检查的数据\r\n        const data = this._$container.children().map((rowIndex,div) => {\r\n            return $(div).children().map((colIndex,span) => parseInt($(span).text()) || 0)\r\n        }).toArray().map($data => $data.toArray())\r\n        \r\n        console.log(data)\r\n       \r\n        const checker = new Checker(data)\r\n        if(checker.check()){\r\n            return true\r\n        }else{\r\n            // 检查不成功进行标记\r\n            const marks = checker.martixMarks\r\n            this._$container.children()\r\n                .each((rowIndex,div) => {\r\n                    $(div).children().each((colIndex,span) => {\r\n                        const $span = $(span)\r\n                        if($span.is('.marked') || marks[rowIndex][colIndex]){\r\n                            $(span).removeClass('error')\r\n                        }else{\r\n                            $(span).addClass('error')\r\n                        }\r\n                        \r\n                    })\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 重置键盘到初始状态\r\n     */\r\n    reset(){\r\n        this._$container.find('span:not(.marked)')\r\n            .removeClass('error mark1 mark2').addClass('empty').text(0)\r\n    }\r\n    /**\r\n     * 清除错误标记\r\n     */\r\n    clear(){\r\n        this._$container.find('span.error').removeClass('error')\r\n    }\r\n    /**\r\n     * 重建新的一盘，开始新一局\r\n     */\r\n    rebuild(){\r\n        this._$container.empty()\r\n        this.build()\r\n        this.layout()\r\n    }\r\n}\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 2\n// module chunks = 0","// 检查数据解决方案\r\n\r\n// 简化方案\r\n// 先将数组排序，然后join成str，判断 '123456789' === '123456789'\r\n\r\n// 生成标记\r\n\r\nfunction checkArray(array){\r\n    const length = array.length\r\n    const marks = new Array(length)\r\n    marks.fill(true)\r\n\r\n    for(let i=0;i<length-1;i++){\r\n        if(!marks[i]){\r\n            continue\r\n        }\r\n        const v = array[i]\r\n        // 是否有效 0 无效 1-9无效\r\n        if(!v){\r\n            marks[i] = false\r\n            continue\r\n        }\r\n        // 是否有重复 i+1 ~9,是否和i位置的数据重复\r\n        for(let j=i+1;j<length;j++){\r\n            if(v === array[j]){\r\n                marks[i] = marks[j] = false\r\n            }\r\n        }\r\n    }\r\n\r\n    return marks\r\n}\r\n\r\n// 输入martix，用户完成的数独数据，9*9\r\n// 处理，对行、列、宫进行检查,并填写marks\r\n// 输出，检查是否成功，marks\r\nconst Toolkit = require('./toolkit')\r\nmodule.exports =  class Checker{\r\n    constructor(martix){\r\n        this._martix = martix\r\n        this._martixMarks = Toolkit.martix.makeMatrix(true)\r\n    }\r\n\r\n    get martixMarks(){\r\n        return this._martixMarks\r\n    }\r\n\r\n    get isSuccess(){\r\n        return this._success\r\n    }\r\n\r\n    check(){\r\n        this.checkRows()\r\n        this.checkCols()\r\n        this.checkBoxs()\r\n\r\n        // 检查是否成功\r\n        this._success = this._martixMarks.every(row => row.every(mark => mark))\r\n        return this._success\r\n    }\r\n\r\n    checkRows(){\r\n        for(let rowIndex=0;rowIndex<9;rowIndex++){\r\n            const row = this._martix[rowIndex]\r\n            const marks = checkArray(row)\r\n            for(let colIndex=0;colIndex<marks.length;colIndex++){\r\n                if(!marks[colIndex]){\r\n                    this._martixMarks[rowIndex][colIndex] = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkCols(){\r\n        for(let colIndex=0;colIndex<9;colIndex++){\r\n            const cols = []\r\n            for(let rowIndex=0;rowIndex<9;rowIndex++){\r\n                cols[rowIndex] = this._martix[rowIndex][colIndex]\r\n            }\r\n            const marks = checkArray(cols)\r\n            for(let rowIndex=0;rowIndex<marks.length;rowIndex++){\r\n                if(!marks[rowIndex]){\r\n                    this._martixMarks[rowIndex][colIndex] = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkBoxs(){\r\n        for(let boxIndex=0;boxIndex<9;boxIndex++){\r\n            const boxes = Toolkit.box.getBoxCells(this._martix,boxIndex)\r\n            const marks = checkArray(boxes)\r\n            for(let cellIndex=0;cellIndex<9;cellIndex++){\r\n                if(!marks[cellIndex]){\r\n                    const {rowIndex,colIndex} = Toolkit.box.convertFromBoxIndex(boxIndex,cellIndex)\r\n                    this._martixMarks[rowIndex][colIndex] = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// const Generator = require('./generator')\r\n// const generater = new Generator()\r\n// generater.generate()\r\n// const martix = generater.martix\r\n\r\n\r\n\r\n// const checker = new Checker(martix)\r\n\r\n// console.log('check result',checker.check())\r\n// console.log(checker.martixMarks)\r\n\r\n// martix[1][1] = 0\r\n// martix[2][3] = martix[3][5] = 5\r\n// const checker1 = new Checker(martix)\r\n// console.log('check result',checker1.check())\r\n// console.log(checker1.martixMarks)\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/checker.js\n// module id = 3\n// module chunks = 0","// 生成数独游戏\r\n\r\n// 生成完成的解决方案 Generator\r\n// 随机去除部分数据，按比例\r\n\r\nconst Generator = require('./generator')\r\n\r\nmodule.exports = class Sudoku{\r\n    constructor(){\r\n        // 生成完成的解决方案\r\n        const generator = new Generator()\r\n        generator.generate()\r\n        this.solutionMartix = generator.martix\r\n    }\r\n\r\n    make(level = 5){\r\n        this.puzzleMartix = this.solutionMartix.map(row => {\r\n            return row.map(cell => Math.random() * 9 < level ? 0 :cell) \r\n        })\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 4\n// module chunks = 0","// 生成数独解决方案\r\nconst Toolkit = require('./toolkit')\r\nmodule.exports =  class Generator{\r\n    generate(){\r\n        while(!this.internalGenerate()){\r\n            console.warn('try again')\r\n        }\r\n    }\r\n\r\n    internalGenerate(){\r\n        // 入口方案\r\n        this.martix = Toolkit.martix.makeMatrix()\r\n        this.orders = Toolkit.martix.makeMatrix()\r\n            .map(row => row.map((v,i) => i))\r\n            .map(row => Toolkit.martix.shuffle(row))\r\n        for(let n=1;n<=9;n++){\r\n            if(!this.fillNumber(n)){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    fillNumber(n){\r\n        return this.fillRow(n,0)\r\n    }\r\n\r\n    fillRow(n,rowIndex){\r\n        if(rowIndex > 8){\r\n            return true\r\n        }\r\n        const row = this.martix[rowIndex]\r\n        // 随机选择列\r\n        const orders = this.orders[rowIndex]\r\n        for(let i=0;i<9;i++){\r\n            const colIndex = orders[i]\r\n            // 如果这个位置有值,跳过\r\n            if(row[colIndex]){\r\n                continue\r\n            }\r\n\r\n            // 检查这个位置是否可以填n\r\n            if(!Toolkit.martix.checkFillable(this.martix,n,rowIndex,colIndex)){\r\n                continue\r\n            }\r\n            row[colIndex] = n\r\n            // 去下一行填写n，如果没填进去，就继续寻找当前行下一个位置\r\n            // 当前行填写n成功，递归调用fillRow()来在下一行中填写n\r\n            if(!this.fillRow(n,rowIndex+1)){\r\n                row[colIndex] = 0\r\n                continue\r\n            }\r\n            return true\r\n        }\r\n        return false    \r\n    } \r\n}\r\n\r\n// const generator = new Generator()\r\n// generator.generate()\r\n// console.log(generator.martix)\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 5\n// module chunks = 0","// 处理弹出的操作面板\r\n\r\n// 逻辑\r\n// cell click popup\r\n// popup click n fill cell\r\n\r\nmodule.exports = class PopupNumbers{\r\n    constructor($panel){\r\n        this._$panel = $panel.hide().removeClass('hidden')\r\n        this._$panel.on('click','span',(e) => {\r\n            const $cell = this.targetCell\r\n            const $span = $(e.target)\r\n            if($span.hasClass('mark1')){\r\n                // 回填样式\r\n                if($cell.hasClass('mark1')){\r\n                    $cell.removeClass('mark1')\r\n                }else{\r\n                    $cell.removeClass('mark2').addClass('mark1')\r\n                }\r\n            }else if($span.hasClass('mark2')){\r\n                // 回填样式\r\n                if($cell.hasClass('mark2')){\r\n                    $cell.removeClass('mark2')\r\n                }else{\r\n                    $cell.removeClass('mark1').addClass('mark2')\r\n                }\r\n            }else if($span.hasClass('empty')){\r\n                // empty取消数字填写和mark\r\n                $cell.text(0).addClass('empty')\r\n            }else{\r\n                // 1-9回填数字\r\n                $cell.removeClass('empty').text($span.text())\r\n            }\r\n            this.hide()\r\n        })\r\n    }\r\n\r\n    popup($cell){\r\n        this.targetCell = $cell\r\n        const {left,top} = $cell.position()\r\n        this._$panel.css({\r\n            left:`${left}px`,\r\n            top:`${top}px`\r\n        }).show()\r\n    }\r\n\r\n    hide(){\r\n        this._$panel.hide()\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/popupnumbers.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}